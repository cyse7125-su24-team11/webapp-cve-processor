FROM golang:1.22.3 AS builder

# Set destination for COPY
WORKDIR /app

# Download Go modules
COPY ./webapp/go.mod ./webapp/go.sum ./

RUN go mod download

# Copy the source code. Note the slash at the end, as explained in
# https://docs.docker.com/engine/reference/builder/#copy
COPY ./webapp/*.go .

# Build
RUN go build -o main main.go


FROM golang:1.22.3

WORKDIR /opt/app
# Install curl and tar, then download and extract the CVE data
# RUN curl -L -o cve-list.tar.gz https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.tar.gz && tar -xzf cve-list.tar.gz --strip-components=1 -C /opt/app && rm cve-list.tar.gz

# COPY loop.sh /usr/local/bin/loop.sh
COPY --from=builder /app/main .
# # Set execute permissions for the entrypoint script
# RUN chmod +x /usr/local/bin/loop.sh

# Set the command to run the entrypoint script
ENTRYPOINT ["./main"]

# # To bind to a TCP port, runtime parameters must be supplied to the docker command.
# # But we can (optionally) document in the Dockerfile what ports
# # the application is going to listen on by default.
# # https://docs.docker.com/engine/reference/builder/#expose
# # EXPOSE 8080

# # Run
# # ENTRYPOINT [ "" ]

# # ENTRYPOINT [ "./main" ]


# # Build the application from source
# FROM golang:1.22.3 AS build-stage

# WORKDIR /app

# COPY ./webapp/go.mod ./webapp/go.sum ./
# RUN go mod download

# COPY ./webapp/*.go ./

# RUN CGO_ENABLED=0 GOOS=linux go build -o /main

# # Use an intermediate image with a shell to set up the environment
# FROM debian:11 AS intermediate

# WORKDIR /app

# RUN mkdir -p /opt/app

# # Install curl and tar, then download and extract the CVE data
# RUN apt-get update && apt-get install -y curl && \
#     curl -L -o cve-list.tar.gz https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.tar.gz && \
#     tar -xzf cve-list.tar.gz --strip-components=1 -C /opt/app && \
#     rm cve-list.tar.gz

# # Copy loop.sh and set permissions
# COPY loop.sh /usr/local/bin/loop.sh
# RUN chmod +x /usr/local/bin/loop.sh

# # Verify the script exists and has the correct permissions in the final image
# RUN ls -l /usr/local/bin/loop.sh

# # Copy the results into the Distroless image
# FROM gcr.io/distroless/base-debian11 AS build-release-stage

# WORKDIR /app

# COPY --from=build-stage /main /main
# COPY --from=intermediate /opt/app /opt/app
# COPY --from=intermediate /usr/local/bin/loop.sh /usr/local/bin/loop.sh

# # Set the command to run the entrypoint script
# ENTRYPOINT ["/usr/local/bin/loop.sh"]

# # Optionally, expose ports if needed
# # EXPOSE 8080

