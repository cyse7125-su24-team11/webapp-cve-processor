# FROM golang:1.22.3

# # Set the working directory inside the container
# WORKDIR /opt/app

# # Copy the entire webapp directory into the container
# COPY ./webapp .

# # Download dependencies
# RUN go mod download

# # Build the Go application
# RUN go build -o main main.go

# RUN chmod +x ./main
# # Set the command to run the application
# CMD [ "./main" ]


# syntax=docker/dockerfile:1

FROM golang:1.22.3

# Set destination for COPY
WORKDIR /app

# Download Go modules
COPY ./webapp/go.mod ./webapp/go.sum ./
RUN go mod download

# Copy the source code. Note the slash at the end, as explained in
# https://docs.docker.com/engine/reference/builder/#copy
COPY ./webapp/*.go .

# Build
RUN CGO_ENABLED=0 GOOS=linux go build main.go

RUN mkdir -p /opt/app
# Install curl and tar, then download and extract the CVE data
RUN curl -L -o cve-list.tar.gz https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.tar.gz && tar -xzf cve-list.tar.gz --strip-components=1 -C /opt/app && rm cve-list.tar.gz



COPY loop.sh /usr/local/bin/loop.sh

# Set execute permissions for the entrypoint script
RUN chmod +x /usr/local/bin/loop.sh

# Set the command to run the entrypoint script
ENTRYPOINT ["/usr/local/bin/loop.sh"]

# To bind to a TCP port, runtime parameters must be supplied to the docker command.
# But we can (optionally) document in the Dockerfile what ports
# the application is going to listen on by default.
# https://docs.docker.com/engine/reference/builder/#expose
# EXPOSE 8080

# Run
# ENTRYPOINT [ "" ]

# ENTRYPOINT [ "./main" ]



